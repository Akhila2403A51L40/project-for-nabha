{"ast":null,"code":"// Quiz Analysis Service - tracks student performance and provides detailed analytics\nconst STORAGE_KEY = 'quiz_results';\nexport const quizAnalysis = {\n  // Save quiz result\n  saveQuizResult: (quizId, result) => {\n    try {\n      const existingResults = quizAnalysis.getQuizResults();\n      const quizResult = {\n        id: Date.now().toString(),\n        quizId: quizId,\n        studentId: 'student_' + Math.random().toString(36).substr(2, 9),\n        timestamp: new Date().toISOString(),\n        score: result.score,\n        totalQuestions: result.totalQuestions,\n        correctAnswers: result.correctAnswers,\n        wrongAnswers: result.wrongAnswers,\n        timeSpent: result.timeSpent,\n        percentage: result.percentage,\n        grade: result.grade,\n        subject: result.subject,\n        level: result.level,\n        difficulty: result.difficulty,\n        answers: result.answers,\n        strengths: result.strengths || [],\n        weaknesses: result.weaknesses || [],\n        recommendations: result.recommendations || []\n      };\n      existingResults.push(quizResult);\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingResults));\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(new CustomEvent('quizResultSaved', {\n        detail: quizResult\n      }));\n      return quizResult;\n    } catch (error) {\n      console.error('Error saving quiz result:', error);\n      return null;\n    }\n  },\n  // Get all quiz results\n  getQuizResults: () => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error retrieving quiz results:', error);\n      return [];\n    }\n  },\n  // Get results by quiz ID\n  getResultsByQuiz: quizId => {\n    const allResults = quizAnalysis.getQuizResults();\n    return allResults.filter(result => result.quizId === quizId);\n  },\n  // Get results by subject\n  getResultsBySubject: subject => {\n    const allResults = quizAnalysis.getQuizResults();\n    return allResults.filter(result => result.subject === subject);\n  },\n  // Get results by level\n  getResultsByLevel: level => {\n    const allResults = quizAnalysis.getQuizResults();\n    return allResults.filter(result => result.level === level);\n  },\n  // Get student's performance summary\n  getStudentPerformance: studentId => {\n    const allResults = quizAnalysis.getQuizResults();\n    const studentResults = allResults.filter(result => result.studentId === studentId);\n    if (studentResults.length === 0) {\n      return {\n        totalQuizzes: 0,\n        averageScore: 0,\n        totalTimeSpent: 0,\n        subjectPerformance: {},\n        levelPerformance: {},\n        recentPerformance: [],\n        improvementTrend: 'stable'\n      };\n    }\n    const totalQuizzes = studentResults.length;\n    const averageScore = studentResults.reduce((sum, result) => sum + result.percentage, 0) / totalQuizzes;\n    const totalTimeSpent = studentResults.reduce((sum, result) => sum + result.timeSpent, 0);\n\n    // Subject-wise performance\n    const subjectPerformance = {};\n    studentResults.forEach(result => {\n      if (!subjectPerformance[result.subject]) {\n        subjectPerformance[result.subject] = {\n          totalQuizzes: 0,\n          averageScore: 0,\n          totalScore: 0\n        };\n      }\n      subjectPerformance[result.subject].totalQuizzes++;\n      subjectPerformance[result.subject].totalScore += result.percentage;\n      subjectPerformance[result.subject].averageScore = subjectPerformance[result.subject].totalScore / subjectPerformance[result.subject].totalQuizzes;\n    });\n\n    // Level-wise performance\n    const levelPerformance = {};\n    studentResults.forEach(result => {\n      if (!levelPerformance[result.level]) {\n        levelPerformance[result.level] = {\n          totalQuizzes: 0,\n          averageScore: 0,\n          totalScore: 0\n        };\n      }\n      levelPerformance[result.level].totalQuizzes++;\n      levelPerformance[result.level].totalScore += result.percentage;\n      levelPerformance[result.level].averageScore = levelPerformance[result.level].totalScore / levelPerformance[result.level].totalQuizzes;\n    });\n\n    // Recent performance (last 10 quizzes)\n    const recentPerformance = studentResults.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 10).map(result => ({\n      quizId: result.quizId,\n      subject: result.subject,\n      score: result.percentage,\n      date: result.timestamp\n    }));\n\n    // Improvement trend\n    let improvementTrend = 'stable';\n    if (recentPerformance.length >= 3) {\n      const recent = recentPerformance.slice(0, 3).reduce((sum, r) => sum + r.score, 0) / 3;\n      const older = recentPerformance.slice(-3).reduce((sum, r) => sum + r.score, 0) / 3;\n      if (recent > older + 5) improvementTrend = 'improving';else if (recent < older - 5) improvementTrend = 'declining';\n    }\n    return {\n      totalQuizzes,\n      averageScore: Math.round(averageScore * 100) / 100,\n      totalTimeSpent,\n      subjectPerformance,\n      levelPerformance,\n      recentPerformance,\n      improvementTrend\n    };\n  },\n  // Get detailed analytics for a specific quiz\n  getQuizAnalytics: quizId => {\n    const results = quizAnalysis.getResultsByQuiz(quizId);\n    if (results.length === 0) {\n      return {\n        totalAttempts: 0,\n        averageScore: 0,\n        highestScore: 0,\n        lowestScore: 0,\n        averageTimeSpent: 0,\n        difficultyAnalysis: {},\n        commonMistakes: [],\n        performanceDistribution: {}\n      };\n    }\n    const totalAttempts = results.length;\n    const scores = results.map(r => r.percentage);\n    const averageScore = scores.reduce((sum, score) => sum + score, 0) / totalAttempts;\n    const highestScore = Math.max(...scores);\n    const lowestScore = Math.min(...scores);\n    const averageTimeSpent = results.reduce((sum, r) => sum + r.timeSpent, 0) / totalAttempts;\n\n    // Performance distribution\n    const performanceDistribution = {\n      excellent: results.filter(r => r.percentage >= 90).length,\n      good: results.filter(r => r.percentage >= 70 && r.percentage < 90).length,\n      average: results.filter(r => r.percentage >= 50 && r.percentage < 70).length,\n      poor: results.filter(r => r.percentage < 50).length\n    };\n\n    // Common mistakes analysis\n    const allAnswers = results.flatMap(r => r.answers);\n    const mistakeCount = {};\n    allAnswers.forEach(answer => {\n      if (!answer.isCorrect) {\n        const key = `${answer.questionId}_${answer.selectedAnswer}`;\n        mistakeCount[key] = (mistakeCount[key] || 0) + 1;\n      }\n    });\n    const commonMistakes = Object.entries(mistakeCount).sort(([, a], [, b]) => b - a).slice(0, 5).map(([key, count]) => ({\n      questionId: key.split('_')[0],\n      wrongAnswer: key.split('_')[1],\n      frequency: count\n    }));\n    return {\n      totalAttempts,\n      averageScore: Math.round(averageScore * 100) / 100,\n      highestScore,\n      lowestScore,\n      averageTimeSpent: Math.round(averageTimeSpent),\n      performanceDistribution,\n      commonMistakes\n    };\n  },\n  // Generate performance insights\n  generateInsights: studentId => {\n    const performance = quizAnalysis.getStudentPerformance(studentId);\n    const insights = [];\n\n    // Overall performance insight\n    if (performance.averageScore >= 80) {\n      insights.push({\n        type: 'success',\n        title: 'Excellent Performance!',\n        message: `You're maintaining an average score of ${performance.averageScore}%. Keep up the great work!`\n      });\n    } else if (performance.averageScore >= 60) {\n      insights.push({\n        type: 'info',\n        title: 'Good Progress',\n        message: `Your average score is ${performance.averageScore}%. There's room for improvement in some areas.`\n      });\n    } else {\n      insights.push({\n        type: 'warning',\n        title: 'Needs Improvement',\n        message: `Your average score is ${performance.averageScore}%. Focus on reviewing difficult topics.`\n      });\n    }\n\n    // Subject-wise insights\n    Object.entries(performance.subjectPerformance).forEach(([subject, data]) => {\n      if (data.averageScore >= 85) {\n        insights.push({\n          type: 'success',\n          title: `${subject.charAt(0).toUpperCase() + subject.slice(1)} Strength`,\n          message: `You're excelling in ${subject} with ${data.averageScore}% average score.`\n        });\n      } else if (data.averageScore < 60) {\n        insights.push({\n          type: 'warning',\n          title: `${subject.charAt(0).toUpperCase() + subject.slice(1)} Focus Area`,\n          message: `${subject} needs more attention. Your average is ${data.averageScore}%.`\n        });\n      }\n    });\n\n    // Improvement trend insight\n    if (performance.improvementTrend === 'improving') {\n      insights.push({\n        type: 'success',\n        title: 'Improvement Trend',\n        message: 'Your recent performance shows improvement! Keep up the momentum.'\n      });\n    } else if (performance.improvementTrend === 'declining') {\n      insights.push({\n        type: 'warning',\n        title: 'Performance Alert',\n        message: 'Your recent scores have declined. Consider reviewing previous topics.'\n      });\n    }\n    return insights;\n  },\n  // Clear all results (for testing)\n  clearAllResults: () => {\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n      window.dispatchEvent(new CustomEvent('quizResultsCleared'));\n      return true;\n    } catch (error) {\n      console.error('Error clearing quiz results:', error);\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["STORAGE_KEY","quizAnalysis","saveQuizResult","quizId","result","existingResults","getQuizResults","quizResult","id","Date","now","toString","studentId","Math","random","substr","timestamp","toISOString","score","totalQuestions","correctAnswers","wrongAnswers","timeSpent","percentage","grade","subject","level","difficulty","answers","strengths","weaknesses","recommendations","push","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","detail","error","console","stored","getItem","parse","getResultsByQuiz","allResults","filter","getResultsBySubject","getResultsByLevel","getStudentPerformance","studentResults","length","totalQuizzes","averageScore","totalTimeSpent","subjectPerformance","levelPerformance","recentPerformance","improvementTrend","reduce","sum","forEach","totalScore","sort","a","b","slice","map","date","recent","r","older","round","getQuizAnalytics","results","totalAttempts","highestScore","lowestScore","averageTimeSpent","difficultyAnalysis","commonMistakes","performanceDistribution","scores","max","min","excellent","good","average","poor","allAnswers","flatMap","mistakeCount","answer","isCorrect","key","questionId","selectedAnswer","Object","entries","count","split","wrongAnswer","frequency","generateInsights","performance","insights","type","title","message","data","charAt","toUpperCase","clearAllResults","removeItem"],"sources":["C:/Users/kumar/OneDrive/Desktop/minor project/src/utils/quizAnalysis.js"],"sourcesContent":["// Quiz Analysis Service - tracks student performance and provides detailed analytics\r\nconst STORAGE_KEY = 'quiz_results';\r\n\r\nexport const quizAnalysis = {\r\n  // Save quiz result\r\n  saveQuizResult: (quizId, result) => {\r\n    try {\r\n      const existingResults = quizAnalysis.getQuizResults();\r\n      const quizResult = {\r\n        id: Date.now().toString(),\r\n        quizId: quizId,\r\n        studentId: 'student_' + Math.random().toString(36).substr(2, 9),\r\n        timestamp: new Date().toISOString(),\r\n        score: result.score,\r\n        totalQuestions: result.totalQuestions,\r\n        correctAnswers: result.correctAnswers,\r\n        wrongAnswers: result.wrongAnswers,\r\n        timeSpent: result.timeSpent,\r\n        percentage: result.percentage,\r\n        grade: result.grade,\r\n        subject: result.subject,\r\n        level: result.level,\r\n        difficulty: result.difficulty,\r\n        answers: result.answers,\r\n        strengths: result.strengths || [],\r\n        weaknesses: result.weaknesses || [],\r\n        recommendations: result.recommendations || []\r\n      };\r\n\r\n      existingResults.push(quizResult);\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingResults));\r\n      \r\n      // Dispatch event for real-time updates\r\n      window.dispatchEvent(new CustomEvent('quizResultSaved', { detail: quizResult }));\r\n      \r\n      return quizResult;\r\n    } catch (error) {\r\n      console.error('Error saving quiz result:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Get all quiz results\r\n  getQuizResults: () => {\r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error retrieving quiz results:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Get results by quiz ID\r\n  getResultsByQuiz: (quizId) => {\r\n    const allResults = quizAnalysis.getQuizResults();\r\n    return allResults.filter(result => result.quizId === quizId);\r\n  },\r\n\r\n  // Get results by subject\r\n  getResultsBySubject: (subject) => {\r\n    const allResults = quizAnalysis.getQuizResults();\r\n    return allResults.filter(result => result.subject === subject);\r\n  },\r\n\r\n  // Get results by level\r\n  getResultsByLevel: (level) => {\r\n    const allResults = quizAnalysis.getQuizResults();\r\n    return allResults.filter(result => result.level === level);\r\n  },\r\n\r\n  // Get student's performance summary\r\n  getStudentPerformance: (studentId) => {\r\n    const allResults = quizAnalysis.getQuizResults();\r\n    const studentResults = allResults.filter(result => result.studentId === studentId);\r\n    \r\n    if (studentResults.length === 0) {\r\n      return {\r\n        totalQuizzes: 0,\r\n        averageScore: 0,\r\n        totalTimeSpent: 0,\r\n        subjectPerformance: {},\r\n        levelPerformance: {},\r\n        recentPerformance: [],\r\n        improvementTrend: 'stable'\r\n      };\r\n    }\r\n\r\n    const totalQuizzes = studentResults.length;\r\n    const averageScore = studentResults.reduce((sum, result) => sum + result.percentage, 0) / totalQuizzes;\r\n    const totalTimeSpent = studentResults.reduce((sum, result) => sum + result.timeSpent, 0);\r\n\r\n    // Subject-wise performance\r\n    const subjectPerformance = {};\r\n    studentResults.forEach(result => {\r\n      if (!subjectPerformance[result.subject]) {\r\n        subjectPerformance[result.subject] = {\r\n          totalQuizzes: 0,\r\n          averageScore: 0,\r\n          totalScore: 0\r\n        };\r\n      }\r\n      subjectPerformance[result.subject].totalQuizzes++;\r\n      subjectPerformance[result.subject].totalScore += result.percentage;\r\n      subjectPerformance[result.subject].averageScore = \r\n        subjectPerformance[result.subject].totalScore / subjectPerformance[result.subject].totalQuizzes;\r\n    });\r\n\r\n    // Level-wise performance\r\n    const levelPerformance = {};\r\n    studentResults.forEach(result => {\r\n      if (!levelPerformance[result.level]) {\r\n        levelPerformance[result.level] = {\r\n          totalQuizzes: 0,\r\n          averageScore: 0,\r\n          totalScore: 0\r\n        };\r\n      }\r\n      levelPerformance[result.level].totalQuizzes++;\r\n      levelPerformance[result.level].totalScore += result.percentage;\r\n      levelPerformance[result.level].averageScore = \r\n        levelPerformance[result.level].totalScore / levelPerformance[result.level].totalQuizzes;\r\n    });\r\n\r\n    // Recent performance (last 10 quizzes)\r\n    const recentPerformance = studentResults\r\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n      .slice(0, 10)\r\n      .map(result => ({\r\n        quizId: result.quizId,\r\n        subject: result.subject,\r\n        score: result.percentage,\r\n        date: result.timestamp\r\n      }));\r\n\r\n    // Improvement trend\r\n    let improvementTrend = 'stable';\r\n    if (recentPerformance.length >= 3) {\r\n      const recent = recentPerformance.slice(0, 3).reduce((sum, r) => sum + r.score, 0) / 3;\r\n      const older = recentPerformance.slice(-3).reduce((sum, r) => sum + r.score, 0) / 3;\r\n      if (recent > older + 5) improvementTrend = 'improving';\r\n      else if (recent < older - 5) improvementTrend = 'declining';\r\n    }\r\n\r\n    return {\r\n      totalQuizzes,\r\n      averageScore: Math.round(averageScore * 100) / 100,\r\n      totalTimeSpent,\r\n      subjectPerformance,\r\n      levelPerformance,\r\n      recentPerformance,\r\n      improvementTrend\r\n    };\r\n  },\r\n\r\n  // Get detailed analytics for a specific quiz\r\n  getQuizAnalytics: (quizId) => {\r\n    const results = quizAnalysis.getResultsByQuiz(quizId);\r\n    \r\n    if (results.length === 0) {\r\n      return {\r\n        totalAttempts: 0,\r\n        averageScore: 0,\r\n        highestScore: 0,\r\n        lowestScore: 0,\r\n        averageTimeSpent: 0,\r\n        difficultyAnalysis: {},\r\n        commonMistakes: [],\r\n        performanceDistribution: {}\r\n      };\r\n    }\r\n\r\n    const totalAttempts = results.length;\r\n    const scores = results.map(r => r.percentage);\r\n    const averageScore = scores.reduce((sum, score) => sum + score, 0) / totalAttempts;\r\n    const highestScore = Math.max(...scores);\r\n    const lowestScore = Math.min(...scores);\r\n    const averageTimeSpent = results.reduce((sum, r) => sum + r.timeSpent, 0) / totalAttempts;\r\n\r\n    // Performance distribution\r\n    const performanceDistribution = {\r\n      excellent: results.filter(r => r.percentage >= 90).length,\r\n      good: results.filter(r => r.percentage >= 70 && r.percentage < 90).length,\r\n      average: results.filter(r => r.percentage >= 50 && r.percentage < 70).length,\r\n      poor: results.filter(r => r.percentage < 50).length\r\n    };\r\n\r\n    // Common mistakes analysis\r\n    const allAnswers = results.flatMap(r => r.answers);\r\n    const mistakeCount = {};\r\n    allAnswers.forEach(answer => {\r\n      if (!answer.isCorrect) {\r\n        const key = `${answer.questionId}_${answer.selectedAnswer}`;\r\n        mistakeCount[key] = (mistakeCount[key] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    const commonMistakes = Object.entries(mistakeCount)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5)\r\n      .map(([key, count]) => ({\r\n        questionId: key.split('_')[0],\r\n        wrongAnswer: key.split('_')[1],\r\n        frequency: count\r\n      }));\r\n\r\n    return {\r\n      totalAttempts,\r\n      averageScore: Math.round(averageScore * 100) / 100,\r\n      highestScore,\r\n      lowestScore,\r\n      averageTimeSpent: Math.round(averageTimeSpent),\r\n      performanceDistribution,\r\n      commonMistakes\r\n    };\r\n  },\r\n\r\n  // Generate performance insights\r\n  generateInsights: (studentId) => {\r\n    const performance = quizAnalysis.getStudentPerformance(studentId);\r\n    const insights = [];\r\n\r\n    // Overall performance insight\r\n    if (performance.averageScore >= 80) {\r\n      insights.push({\r\n        type: 'success',\r\n        title: 'Excellent Performance!',\r\n        message: `You're maintaining an average score of ${performance.averageScore}%. Keep up the great work!`\r\n      });\r\n    } else if (performance.averageScore >= 60) {\r\n      insights.push({\r\n        type: 'info',\r\n        title: 'Good Progress',\r\n        message: `Your average score is ${performance.averageScore}%. There's room for improvement in some areas.`\r\n      });\r\n    } else {\r\n      insights.push({\r\n        type: 'warning',\r\n        title: 'Needs Improvement',\r\n        message: `Your average score is ${performance.averageScore}%. Focus on reviewing difficult topics.`\r\n      });\r\n    }\r\n\r\n    // Subject-wise insights\r\n    Object.entries(performance.subjectPerformance).forEach(([subject, data]) => {\r\n      if (data.averageScore >= 85) {\r\n        insights.push({\r\n          type: 'success',\r\n          title: `${subject.charAt(0).toUpperCase() + subject.slice(1)} Strength`,\r\n          message: `You're excelling in ${subject} with ${data.averageScore}% average score.`\r\n        });\r\n      } else if (data.averageScore < 60) {\r\n        insights.push({\r\n          type: 'warning',\r\n          title: `${subject.charAt(0).toUpperCase() + subject.slice(1)} Focus Area`,\r\n          message: `${subject} needs more attention. Your average is ${data.averageScore}%.`\r\n        });\r\n      }\r\n    });\r\n\r\n    // Improvement trend insight\r\n    if (performance.improvementTrend === 'improving') {\r\n      insights.push({\r\n        type: 'success',\r\n        title: 'Improvement Trend',\r\n        message: 'Your recent performance shows improvement! Keep up the momentum.'\r\n      });\r\n    } else if (performance.improvementTrend === 'declining') {\r\n      insights.push({\r\n        type: 'warning',\r\n        title: 'Performance Alert',\r\n        message: 'Your recent scores have declined. Consider reviewing previous topics.'\r\n      });\r\n    }\r\n\r\n    return insights;\r\n  },\r\n\r\n  // Clear all results (for testing)\r\n  clearAllResults: () => {\r\n    try {\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      window.dispatchEvent(new CustomEvent('quizResultsCleared'));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error clearing quiz results:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}