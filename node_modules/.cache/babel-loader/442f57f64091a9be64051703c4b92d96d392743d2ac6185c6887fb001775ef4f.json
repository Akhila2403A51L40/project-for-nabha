{"ast":null,"code":"// Download service for handling course material downloads\nimport { downloadManager } from './downloadManager';\nexport const downloadService = {\n  // Download course materials as a ZIP file\n  downloadCourse: async (courseId, courseTitle) => {\n    try {\n      // Create a mock download for demonstration\n      // In a real application, this would make an API call to get the course materials\n      const mockCourseData = {\n        id: courseId,\n        title: courseTitle,\n        materials: [{\n          name: 'Course Overview.pdf',\n          type: 'pdf',\n          size: '2.3 MB'\n        }, {\n          name: 'Lesson 1 - Introduction.mp4',\n          type: 'video',\n          size: '45.2 MB'\n        }, {\n          name: 'Lesson 2 - Basic Concepts.mp4',\n          type: 'video',\n          size: '38.7 MB'\n        }, {\n          name: 'Practice Exercises.pdf',\n          type: 'pdf',\n          size: '1.8 MB'\n        }, {\n          name: 'Additional Resources.pdf',\n          type: 'pdf',\n          size: '3.1 MB'\n        }]\n      };\n\n      // Show download progress\n      showDownloadProgress(courseTitle);\n\n      // Simulate download process\n      await simulateDownload(courseTitle);\n\n      // Save to download manager\n      downloadManager.saveDownloadedCourse(mockCourseData);\n\n      // Show success message\n      showDownloadSuccess(courseTitle, mockCourseData.materials);\n    } catch (error) {\n      console.error('Download failed:', error);\n      showDownloadError(courseTitle);\n    }\n  },\n  // Download individual lesson materials\n  downloadLesson: async (lessonId, lessonTitle, lessonType, courseData) => {\n    try {\n      const fileExtension = getFileExtension(lessonType);\n      const fileName = `${lessonTitle}.${fileExtension}`;\n      showDownloadProgress(lessonTitle);\n      await simulateDownload(lessonTitle);\n\n      // Save to download manager\n      downloadManager.saveDownloadedLesson({\n        id: lessonId,\n        title: lessonTitle,\n        type: lessonType\n      }, courseData);\n      showDownloadSuccess(lessonTitle, [{\n        name: fileName,\n        type: lessonType,\n        size: '5.2 MB'\n      }]);\n    } catch (error) {\n      console.error('Lesson download failed:', error);\n      showDownloadError(lessonTitle);\n    }\n  }\n};\n\n// Helper function to get file extension based on lesson type\nconst getFileExtension = type => {\n  switch (type) {\n    case 'video':\n      return 'mp4';\n    case 'interactive':\n      return 'pdf';\n    case 'quiz':\n      return 'pdf';\n    default:\n      return 'pdf';\n  }\n};\n\n// Simulate download process with progress\nconst simulateDownload = async title => {\n  return new Promise(resolve => {\n    // Simulate download time based on content size\n    const downloadTime = Math.random() * 3000 + 2000; // 2-5 seconds\n    setTimeout(resolve, downloadTime);\n  });\n};\n\n// Show download progress notification\nconst showDownloadProgress = title => {\n  // Create a simple notification system\n  const notification = document.createElement('div');\n  notification.className = 'download-notification progress';\n  notification.innerHTML = `\n    <div class=\"notification-content\">\n      <div class=\"notification-icon\">üì•</div>\n      <div class=\"notification-text\">\n        <div class=\"notification-title\">Downloading...</div>\n        <div class=\"notification-subtitle\">${title}</div>\n      </div>\n      <div class=\"notification-progress\">\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Add styles\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #4CAF50;\n    color: white;\n    padding: 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    z-index: 1000;\n    min-width: 300px;\n    animation: slideIn 0.3s ease-out;\n  `;\n  document.body.appendChild(notification);\n\n  // Animate progress bar\n  const progressFill = notification.querySelector('.progress-fill');\n  let progress = 0;\n  const interval = setInterval(() => {\n    progress += Math.random() * 15;\n    if (progress >= 100) {\n      progress = 100;\n      clearInterval(interval);\n    }\n    progressFill.style.width = progress + '%';\n  }, 200);\n};\n\n// Show download success notification\nconst showDownloadSuccess = (title, materials) => {\n  // Remove progress notification\n  const progressNotification = document.querySelector('.download-notification.progress');\n  if (progressNotification) {\n    progressNotification.remove();\n  }\n  const notification = document.createElement('div');\n  notification.className = 'download-notification success';\n  notification.innerHTML = `\n    <div class=\"notification-content\">\n      <div class=\"notification-icon\">‚úÖ</div>\n      <div class=\"notification-text\">\n        <div class=\"notification-title\">Download Complete!</div>\n        <div class=\"notification-subtitle\">${title}</div>\n        <div class=\"notification-files\">\n          ${materials.map(material => `<div class=\"file-item\">üìÑ ${material.name} (${material.size})</div>`).join('')}\n        </div>\n      </div>\n    </div>\n  `;\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #4CAF50;\n    color: white;\n    padding: 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    z-index: 1000;\n    min-width: 300px;\n    animation: slideIn 0.3s ease-out;\n  `;\n  document.body.appendChild(notification);\n\n  // Auto remove after 5 seconds\n  setTimeout(() => {\n    if (notification.parentNode) {\n      notification.remove();\n    }\n  }, 5000);\n};\n\n// Show download error notification\nconst showDownloadError = title => {\n  const notification = document.createElement('div');\n  notification.className = 'download-notification error';\n  notification.innerHTML = `\n    <div class=\"notification-content\">\n      <div class=\"notification-icon\">‚ùå</div>\n      <div class=\"notification-text\">\n        <div class=\"notification-title\">Download Failed</div>\n        <div class=\"notification-subtitle\">${title}</div>\n        <div class=\"notification-message\">Please try again later</div>\n      </div>\n    </div>\n  `;\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #f44336;\n    color: white;\n    padding: 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    z-index: 1000;\n    min-width: 300px;\n    animation: slideIn 0.3s ease-out;\n  `;\n  document.body.appendChild(notification);\n\n  // Auto remove after 5 seconds\n  setTimeout(() => {\n    if (notification.parentNode) {\n      notification.remove();\n    }\n  }, 5000);\n};\n\n// Add CSS animations\nconst style = document.createElement('style');\nstyle.textContent = `\n  @keyframes slideIn {\n    from {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n  \n  .notification-files {\n    margin-top: 8px;\n    font-size: 12px;\n    opacity: 0.9;\n  }\n  \n  .file-item {\n    margin: 2px 0;\n  }\n  \n  .progress-bar {\n    width: 100%;\n    height: 4px;\n    background: rgba(255,255,255,0.3);\n    border-radius: 2px;\n    overflow: hidden;\n    margin-top: 8px;\n  }\n  \n  .progress-fill {\n    height: 100%;\n    background: white;\n    border-radius: 2px;\n    transition: width 0.3s ease;\n    width: 0%;\n  }\n`;\ndocument.head.appendChild(style);","map":{"version":3,"names":["downloadManager","downloadService","downloadCourse","courseId","courseTitle","mockCourseData","id","title","materials","name","type","size","showDownloadProgress","simulateDownload","saveDownloadedCourse","showDownloadSuccess","error","console","showDownloadError","downloadLesson","lessonId","lessonTitle","lessonType","courseData","fileExtension","getFileExtension","fileName","saveDownloadedLesson","Promise","resolve","downloadTime","Math","random","setTimeout","notification","document","createElement","className","innerHTML","style","cssText","body","appendChild","progressFill","querySelector","progress","interval","setInterval","clearInterval","width","progressNotification","remove","map","material","join","parentNode","textContent","head"],"sources":["C:/Users/kumar/OneDrive/Desktop/minor project/src/utils/downloadService.js"],"sourcesContent":["// Download service for handling course material downloads\r\nimport { downloadManager } from './downloadManager';\r\n\r\nexport const downloadService = {\r\n  // Download course materials as a ZIP file\r\n  downloadCourse: async (courseId, courseTitle) => {\r\n    try {\r\n      // Create a mock download for demonstration\r\n      // In a real application, this would make an API call to get the course materials\r\n      const mockCourseData = {\r\n        id: courseId,\r\n        title: courseTitle,\r\n        materials: [\r\n          { name: 'Course Overview.pdf', type: 'pdf', size: '2.3 MB' },\r\n          { name: 'Lesson 1 - Introduction.mp4', type: 'video', size: '45.2 MB' },\r\n          { name: 'Lesson 2 - Basic Concepts.mp4', type: 'video', size: '38.7 MB' },\r\n          { name: 'Practice Exercises.pdf', type: 'pdf', size: '1.8 MB' },\r\n          { name: 'Additional Resources.pdf', type: 'pdf', size: '3.1 MB' }\r\n        ]\r\n      };\r\n\r\n      // Show download progress\r\n      showDownloadProgress(courseTitle);\r\n      \r\n      // Simulate download process\r\n      await simulateDownload(courseTitle);\r\n      \r\n      // Save to download manager\r\n      downloadManager.saveDownloadedCourse(mockCourseData);\r\n      \r\n      // Show success message\r\n      showDownloadSuccess(courseTitle, mockCourseData.materials);\r\n      \r\n    } catch (error) {\r\n      console.error('Download failed:', error);\r\n      showDownloadError(courseTitle);\r\n    }\r\n  },\r\n\r\n  // Download individual lesson materials\r\n  downloadLesson: async (lessonId, lessonTitle, lessonType, courseData) => {\r\n    try {\r\n      const fileExtension = getFileExtension(lessonType);\r\n      const fileName = `${lessonTitle}.${fileExtension}`;\r\n      \r\n      showDownloadProgress(lessonTitle);\r\n      await simulateDownload(lessonTitle);\r\n      \r\n      // Save to download manager\r\n      downloadManager.saveDownloadedLesson(\r\n        { id: lessonId, title: lessonTitle, type: lessonType },\r\n        courseData\r\n      );\r\n      \r\n      showDownloadSuccess(lessonTitle, [{ name: fileName, type: lessonType, size: '5.2 MB' }]);\r\n      \r\n    } catch (error) {\r\n      console.error('Lesson download failed:', error);\r\n      showDownloadError(lessonTitle);\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to get file extension based on lesson type\r\nconst getFileExtension = (type) => {\r\n  switch (type) {\r\n    case 'video':\r\n      return 'mp4';\r\n    case 'interactive':\r\n      return 'pdf';\r\n    case 'quiz':\r\n      return 'pdf';\r\n    default:\r\n      return 'pdf';\r\n  }\r\n};\r\n\r\n// Simulate download process with progress\r\nconst simulateDownload = async (title) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate download time based on content size\r\n    const downloadTime = Math.random() * 3000 + 2000; // 2-5 seconds\r\n    setTimeout(resolve, downloadTime);\r\n  });\r\n};\r\n\r\n// Show download progress notification\r\nconst showDownloadProgress = (title) => {\r\n  // Create a simple notification system\r\n  const notification = document.createElement('div');\r\n  notification.className = 'download-notification progress';\r\n  notification.innerHTML = `\r\n    <div class=\"notification-content\">\r\n      <div class=\"notification-icon\">üì•</div>\r\n      <div class=\"notification-text\">\r\n        <div class=\"notification-title\">Downloading...</div>\r\n        <div class=\"notification-subtitle\">${title}</div>\r\n      </div>\r\n      <div class=\"notification-progress\">\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress-fill\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  // Add styles\r\n  notification.style.cssText = `\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    background: #4CAF50;\r\n    color: white;\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n    z-index: 1000;\r\n    min-width: 300px;\r\n    animation: slideIn 0.3s ease-out;\r\n  `;\r\n  \r\n  document.body.appendChild(notification);\r\n  \r\n  // Animate progress bar\r\n  const progressFill = notification.querySelector('.progress-fill');\r\n  let progress = 0;\r\n  const interval = setInterval(() => {\r\n    progress += Math.random() * 15;\r\n    if (progress >= 100) {\r\n      progress = 100;\r\n      clearInterval(interval);\r\n    }\r\n    progressFill.style.width = progress + '%';\r\n  }, 200);\r\n};\r\n\r\n// Show download success notification\r\nconst showDownloadSuccess = (title, materials) => {\r\n  // Remove progress notification\r\n  const progressNotification = document.querySelector('.download-notification.progress');\r\n  if (progressNotification) {\r\n    progressNotification.remove();\r\n  }\r\n  \r\n  const notification = document.createElement('div');\r\n  notification.className = 'download-notification success';\r\n  notification.innerHTML = `\r\n    <div class=\"notification-content\">\r\n      <div class=\"notification-icon\">‚úÖ</div>\r\n      <div class=\"notification-text\">\r\n        <div class=\"notification-title\">Download Complete!</div>\r\n        <div class=\"notification-subtitle\">${title}</div>\r\n        <div class=\"notification-files\">\r\n          ${materials.map(material => \r\n            `<div class=\"file-item\">üìÑ ${material.name} (${material.size})</div>`\r\n          ).join('')}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  notification.style.cssText = `\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    background: #4CAF50;\r\n    color: white;\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n    z-index: 1000;\r\n    min-width: 300px;\r\n    animation: slideIn 0.3s ease-out;\r\n  `;\r\n  \r\n  document.body.appendChild(notification);\r\n  \r\n  // Auto remove after 5 seconds\r\n  setTimeout(() => {\r\n    if (notification.parentNode) {\r\n      notification.remove();\r\n    }\r\n  }, 5000);\r\n};\r\n\r\n// Show download error notification\r\nconst showDownloadError = (title) => {\r\n  const notification = document.createElement('div');\r\n  notification.className = 'download-notification error';\r\n  notification.innerHTML = `\r\n    <div class=\"notification-content\">\r\n      <div class=\"notification-icon\">‚ùå</div>\r\n      <div class=\"notification-text\">\r\n        <div class=\"notification-title\">Download Failed</div>\r\n        <div class=\"notification-subtitle\">${title}</div>\r\n        <div class=\"notification-message\">Please try again later</div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  notification.style.cssText = `\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    background: #f44336;\r\n    color: white;\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n    z-index: 1000;\r\n    min-width: 300px;\r\n    animation: slideIn 0.3s ease-out;\r\n  `;\r\n  \r\n  document.body.appendChild(notification);\r\n  \r\n  // Auto remove after 5 seconds\r\n  setTimeout(() => {\r\n    if (notification.parentNode) {\r\n      notification.remove();\r\n    }\r\n  }, 5000);\r\n};\r\n\r\n// Add CSS animations\r\nconst style = document.createElement('style');\r\nstyle.textContent = `\r\n  @keyframes slideIn {\r\n    from {\r\n      transform: translateX(100%);\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      transform: translateX(0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  .notification-files {\r\n    margin-top: 8px;\r\n    font-size: 12px;\r\n    opacity: 0.9;\r\n  }\r\n  \r\n  .file-item {\r\n    margin: 2px 0;\r\n  }\r\n  \r\n  .progress-bar {\r\n    width: 100%;\r\n    height: 4px;\r\n    background: rgba(255,255,255,0.3);\r\n    border-radius: 2px;\r\n    overflow: hidden;\r\n    margin-top: 8px;\r\n  }\r\n  \r\n  .progress-fill {\r\n    height: 100%;\r\n    background: white;\r\n    border-radius: 2px;\r\n    transition: width 0.3s ease;\r\n    width: 0%;\r\n  }\r\n`;\r\ndocument.head.appendChild(style);\r\n"],"mappings":"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,aAAa,CAAC,KAAK,CAAC;EAClDF,YAAY,CAACG,SAAS,GAAG,6BAA6B;EACtDH,YAAY,CAACI,SAAS,GAAG;AAC3B;AACA;AACA;AACA;AACA,6CAA6C/B,KAAK;AAClD;AACA;AACA;AACA,GAAG;EAED2B,YAAY,CAACK,KAAK,CAACC,OAAO,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,YAAY,CAAC;;EAEvC;EACAD,UAAU,CAAC,MAAM;IACf,IAAIC,YAAY,CAACqB,UAAU,EAAE;MAC3BrB,YAAY,CAACiB,MAAM,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,IAAI,CAAC;AACV,CAAC;;AAED;AACA,MAAMZ,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AAC7CG,KAAK,CAACiB,WAAW,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDrB,QAAQ,CAACsB,IAAI,CAACf,WAAW,CAACH,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}