{"ast":null,"code":"// Download Manager - handles storage and retrieval of downloaded items\nconst STORAGE_KEY = 'downloaded_courses';\nexport const downloadManager = {\n  // Save downloaded course to local storage\n  saveDownloadedCourse: courseData => {\n    try {\n      const existingDownloads = downloadManager.getDownloadedCourses();\n      const downloadItem = {\n        id: courseData.id,\n        title: courseData.title,\n        type: 'course',\n        downloadDate: new Date().toISOString(),\n        materials: courseData.materials || [],\n        courseInfo: {\n          subject: courseData.subject,\n          level: courseData.level,\n          instructor: courseData.instructor,\n          thumbnail: courseData.thumbnail,\n          duration: courseData.duration,\n          lessons: courseData.lessons\n        }\n      };\n\n      // Check if course already exists\n      const existingIndex = existingDownloads.findIndex(item => item.id === downloadItem.id && item.type === 'course');\n      if (existingIndex >= 0) {\n        // Update existing download\n        existingDownloads[existingIndex] = downloadItem;\n      } else {\n        // Add new download\n        existingDownloads.push(downloadItem);\n      }\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingDownloads));\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\n      return true;\n    } catch (error) {\n      console.error('Error saving downloaded course:', error);\n      return false;\n    }\n  },\n  // Save downloaded lesson to local storage\n  saveDownloadedLesson: (lessonData, courseData) => {\n    try {\n      const existingDownloads = downloadManager.getDownloadedCourses();\n      const downloadItem = {\n        id: `${courseData.id}-${lessonData.id}`,\n        title: lessonData.title,\n        type: 'lesson',\n        downloadDate: new Date().toISOString(),\n        materials: [{\n          name: `${lessonData.title}.${getFileExtension(lessonData.type)}`,\n          type: lessonData.type,\n          size: '5.2 MB'\n        }],\n        courseInfo: {\n          courseId: courseData.id,\n          courseTitle: courseData.title,\n          subject: courseData.subject,\n          level: courseData.level,\n          instructor: courseData.instructor,\n          thumbnail: courseData.thumbnail\n        },\n        lessonInfo: {\n          lessonId: lessonData.id,\n          lessonType: lessonData.type,\n          duration: lessonData.duration,\n          description: lessonData.description\n        }\n      };\n\n      // Check if lesson already exists\n      const existingIndex = existingDownloads.findIndex(item => item.id === downloadItem.id && item.type === 'lesson');\n      if (existingIndex >= 0) {\n        // Update existing download\n        existingDownloads[existingIndex] = downloadItem;\n      } else {\n        // Add new download\n        existingDownloads.push(downloadItem);\n      }\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingDownloads));\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\n      return true;\n    } catch (error) {\n      console.error('Error saving downloaded lesson:', error);\n      return false;\n    }\n  },\n  // Get all downloaded courses and lessons\n  getDownloadedCourses: () => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error retrieving downloaded courses:', error);\n      return [];\n    }\n  },\n  // Get downloaded courses only\n  getDownloadedCoursesOnly: () => {\n    return downloadManager.getDownloadedCourses().filter(item => item.type === 'course');\n  },\n  // Get downloaded lessons only\n  getDownloadedLessons: () => {\n    return downloadManager.getDownloadedCourses().filter(item => item.type === 'lesson');\n  },\n  // Get downloads by course ID\n  getDownloadsByCourse: courseId => {\n    return downloadManager.getDownloadedCourses().filter(item => item.courseInfo.courseId === courseId || item.id === courseId);\n  },\n  // Remove downloaded item\n  removeDownloadedItem: itemId => {\n    try {\n      const existingDownloads = downloadManager.getDownloadedCourses();\n      const filteredDownloads = existingDownloads.filter(item => item.id !== itemId);\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(filteredDownloads));\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\n      return true;\n    } catch (error) {\n      console.error('Error removing downloaded item:', error);\n      return false;\n    }\n  },\n  // Clear all downloads\n  clearAllDownloads: () => {\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\n      return true;\n    } catch (error) {\n      console.error('Error clearing downloads:', error);\n      return false;\n    }\n  },\n  // Get download statistics\n  getDownloadStats: () => {\n    const downloads = downloadManager.getDownloadedCourses();\n    const courses = downloads.filter(item => item.type === 'course');\n    const lessons = downloads.filter(item => item.type === 'lesson');\n    const totalSize = downloads.reduce((total, item) => {\n      return total + item.materials.reduce((itemTotal, material) => {\n        const sizeInMB = parseFloat(material.size);\n        return itemTotal + (isNaN(sizeInMB) ? 0 : sizeInMB);\n      }, 0);\n    }, 0);\n    return {\n      totalDownloads: downloads.length,\n      totalCourses: courses.length,\n      totalLessons: lessons.length,\n      totalSize: totalSize.toFixed(1) + ' MB',\n      lastDownload: downloads.length > 0 ? new Date(Math.max(...downloads.map(item => new Date(item.downloadDate)))) : null\n    };\n  }\n};\n\n// Helper function to get file extension\nconst getFileExtension = type => {\n  switch (type) {\n    case 'video':\n      return 'mp4';\n    case 'interactive':\n      return 'pdf';\n    case 'quiz':\n      return 'pdf';\n    default:\n      return 'pdf';\n  }\n};","map":{"version":3,"names":["STORAGE_KEY","downloadManager","saveDownloadedCourse","courseData","existingDownloads","getDownloadedCourses","downloadItem","id","title","type","downloadDate","Date","toISOString","materials","courseInfo","subject","level","instructor","thumbnail","duration","lessons","existingIndex","findIndex","item","push","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","error","console","saveDownloadedLesson","lessonData","name","getFileExtension","size","courseId","courseTitle","lessonInfo","lessonId","lessonType","description","stored","getItem","parse","getDownloadedCoursesOnly","filter","getDownloadedLessons","getDownloadsByCourse","removeDownloadedItem","itemId","filteredDownloads","clearAllDownloads","removeItem","getDownloadStats","downloads","courses","totalSize","reduce","total","itemTotal","material","sizeInMB","parseFloat","isNaN","totalDownloads","length","totalCourses","totalLessons","toFixed","lastDownload","Math","max","map"],"sources":["C:/Users/kumar/OneDrive/Desktop/minor project/src/utils/downloadManager.js"],"sourcesContent":["// Download Manager - handles storage and retrieval of downloaded items\r\nconst STORAGE_KEY = 'downloaded_courses';\r\n\r\nexport const downloadManager = {\r\n  // Save downloaded course to local storage\r\n  saveDownloadedCourse: (courseData) => {\r\n    try {\r\n      const existingDownloads = downloadManager.getDownloadedCourses();\r\n      const downloadItem = {\r\n        id: courseData.id,\r\n        title: courseData.title,\r\n        type: 'course',\r\n        downloadDate: new Date().toISOString(),\r\n        materials: courseData.materials || [],\r\n        courseInfo: {\r\n          subject: courseData.subject,\r\n          level: courseData.level,\r\n          instructor: courseData.instructor,\r\n          thumbnail: courseData.thumbnail,\r\n          duration: courseData.duration,\r\n          lessons: courseData.lessons\r\n        }\r\n      };\r\n\r\n      // Check if course already exists\r\n      const existingIndex = existingDownloads.findIndex(item => \r\n        item.id === downloadItem.id && item.type === 'course'\r\n      );\r\n\r\n      if (existingIndex >= 0) {\r\n        // Update existing download\r\n        existingDownloads[existingIndex] = downloadItem;\r\n      } else {\r\n        // Add new download\r\n        existingDownloads.push(downloadItem);\r\n      }\r\n\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingDownloads));\r\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving downloaded course:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Save downloaded lesson to local storage\r\n  saveDownloadedLesson: (lessonData, courseData) => {\r\n    try {\r\n      const existingDownloads = downloadManager.getDownloadedCourses();\r\n      const downloadItem = {\r\n        id: `${courseData.id}-${lessonData.id}`,\r\n        title: lessonData.title,\r\n        type: 'lesson',\r\n        downloadDate: new Date().toISOString(),\r\n        materials: [{\r\n          name: `${lessonData.title}.${getFileExtension(lessonData.type)}`,\r\n          type: lessonData.type,\r\n          size: '5.2 MB'\r\n        }],\r\n        courseInfo: {\r\n          courseId: courseData.id,\r\n          courseTitle: courseData.title,\r\n          subject: courseData.subject,\r\n          level: courseData.level,\r\n          instructor: courseData.instructor,\r\n          thumbnail: courseData.thumbnail\r\n        },\r\n        lessonInfo: {\r\n          lessonId: lessonData.id,\r\n          lessonType: lessonData.type,\r\n          duration: lessonData.duration,\r\n          description: lessonData.description\r\n        }\r\n      };\r\n\r\n      // Check if lesson already exists\r\n      const existingIndex = existingDownloads.findIndex(item => \r\n        item.id === downloadItem.id && item.type === 'lesson'\r\n      );\r\n\r\n      if (existingIndex >= 0) {\r\n        // Update existing download\r\n        existingDownloads[existingIndex] = downloadItem;\r\n      } else {\r\n        // Add new download\r\n        existingDownloads.push(downloadItem);\r\n      }\r\n\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(existingDownloads));\r\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving downloaded lesson:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Get all downloaded courses and lessons\r\n  getDownloadedCourses: () => {\r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error retrieving downloaded courses:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Get downloaded courses only\r\n  getDownloadedCoursesOnly: () => {\r\n    return downloadManager.getDownloadedCourses().filter(item => item.type === 'course');\r\n  },\r\n\r\n  // Get downloaded lessons only\r\n  getDownloadedLessons: () => {\r\n    return downloadManager.getDownloadedCourses().filter(item => item.type === 'lesson');\r\n  },\r\n\r\n  // Get downloads by course ID\r\n  getDownloadsByCourse: (courseId) => {\r\n    return downloadManager.getDownloadedCourses().filter(item => \r\n      item.courseInfo.courseId === courseId || item.id === courseId\r\n    );\r\n  },\r\n\r\n  // Remove downloaded item\r\n  removeDownloadedItem: (itemId) => {\r\n    try {\r\n      const existingDownloads = downloadManager.getDownloadedCourses();\r\n      const filteredDownloads = existingDownloads.filter(item => item.id !== itemId);\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(filteredDownloads));\r\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error removing downloaded item:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Clear all downloads\r\n  clearAllDownloads: () => {\r\n    try {\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      window.dispatchEvent(new CustomEvent('downloadsUpdated'));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error clearing downloads:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Get download statistics\r\n  getDownloadStats: () => {\r\n    const downloads = downloadManager.getDownloadedCourses();\r\n    const courses = downloads.filter(item => item.type === 'course');\r\n    const lessons = downloads.filter(item => item.type === 'lesson');\r\n    \r\n    const totalSize = downloads.reduce((total, item) => {\r\n      return total + item.materials.reduce((itemTotal, material) => {\r\n        const sizeInMB = parseFloat(material.size);\r\n        return itemTotal + (isNaN(sizeInMB) ? 0 : sizeInMB);\r\n      }, 0);\r\n    }, 0);\r\n\r\n    return {\r\n      totalDownloads: downloads.length,\r\n      totalCourses: courses.length,\r\n      totalLessons: lessons.length,\r\n      totalSize: totalSize.toFixed(1) + ' MB',\r\n      lastDownload: downloads.length > 0 ? \r\n        new Date(Math.max(...downloads.map(item => new Date(item.downloadDate)))) : null\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to get file extension\r\nconst getFileExtension = (type) => {\r\n  switch (type) {\r\n    case 'video':\r\n      return 'mp4';\r\n    case 'interactive':\r\n      return 'pdf';\r\n    case 'quiz':\r\n      return 'pdf';\r\n    default:\r\n      return 'pdf';\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}